{"version":3,"sources":["webpack:///./src/app/image-results/image-results.module.ts","webpack:///./src/app/image-results/image-results.page.html","webpack:///./src/app/image-results/image-results.page.scss","webpack:///./src/app/image-results/image-results.page.ts"],"names":[],"mappings":"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","file":"image-results-image-results-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\n\nimport { ImageResultsPage } from './image-results.page';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        IonicModule,\n        RouterModule.forChild([\n            {\n                path: '',\n                component: ImageResultsPage\n            }\n        ])\n    ],\n    declarations: [ImageResultsPage]\n})\nexport class ImageResultsPageModule {}\n","module.exports = \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button defaultHref=\\\"home\\\"></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>\\n            Image Results\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n    <ion-grid>\\n        <ion-row *ngFor=\\\"let row of rows\\\">\\n            <ng-container *ngFor=\\\"let page of row.pages\\\">\\n                <ion-col size=\\\"4\\\" (click)=\\\"gotoImageView(page)\\\">\\n                    <img [src]=\\\"sanitizedPreviewImages.get(page.pageId)\\\" />\\n                </ion-col>\\n            </ng-container>\\n        </ion-row>\\n    </ion-grid>\\n</ion-content>\\n\\n<ion-footer>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-button (click)=\\\"addScan()\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"add-circle\\\"></ion-icon>\\n                Add\\n            </ion-button>\\n            <ion-button (click)=\\\"showSaveSelection()\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"document\\\"></ion-icon>\\n                Save\\n            </ion-button>\\n        </ion-buttons>\\n        <ion-buttons slot=\\\"end\\\">\\n            <ion-button (click)=\\\"removeAll()\\\">\\n                <ion-icon slot=\\\"start\\\" name=\\\"trash\\\"></ion-icon>\\n                Delete All\\n            </ion-button>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-footer>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2ltYWdlLXJlc3VsdHMvaW1hZ2UtcmVzdWx0cy5wYWdlLnNjc3MifQ== */\"","import { Component } from '@angular/core';\nimport { ActionSheetController, Platform } from '@ionic/angular';\nimport { Router } from '@angular/router';\n\nimport { Page } from 'cordova-plugin-scanbot-sdk';\n\nimport { DialogsService } from '../services/dialogs.service';\nimport { ScanbotSdkDemoService } from '../services/scanbot-sdk-demo.service';\nimport { ImageResultsRepository } from '../services/image-results.repository';\n\n@Component({\n    selector: 'app-image-results',\n    templateUrl: 'image-results.page.html',\n    styleUrls: ['image-results.page.scss'],\n})\nexport class ImageResultsPage {\n\n    public pages: Page[] = [];\n    public rows = [];\n    public sanitizedPreviewImages = new Map<string, string>();\n\n    constructor(private scanbotService: ScanbotSdkDemoService,\n                private imageResultsRepository: ImageResultsRepository,\n                private dialogsService: DialogsService,\n                private platform: Platform,\n                private router: Router,\n                private actionSheetController: ActionSheetController) { }\n\n    ionViewWillEnter() {\n        this.reloadPages();\n    }\n\n    private async reloadPages() {\n        this.pages = this.imageResultsRepository.getPages();\n        // build sanitizes preview image file URIs\n        for (const page of this.pages) {\n            // this.sanitizedPreviewImages.set(page.pageId,\n            //     this.imageResultsRepository.sanitizeFileUri(page.documentPreviewImageFileUri));\n\n            const data = await this.scanbotService.fetchDataFromUri(page.documentPreviewImageFileUri);\n            this.sanitizedPreviewImages.set(page.pageId, this.imageResultsRepository.sanitizeBase64(data));\n        }\n        // build rows\n        this.rows = [];\n        for (let i = 0; i < this.pages.length; i += 3) {\n            this.rows.push({ pages: this.pages.slice(i, i + 3) });\n        }\n    }\n\n    async gotoImageView(page: Page) {\n        await this.router.navigate(['/image-view', page.pageId]);\n    }\n\n    async saveAsPdf() {\n        if (!(await this.scanbotService.checkLicense())) { return; }\n        if (!this.checkImages()) { return; }\n\n        const loading = await this.dialogsService.createLoading('Creating PDF ...');\n        try {\n            await loading.present();\n            const result = await this.scanbotService.SDK.createPdf({\n                images: this.pages.map(p => p.documentImageFileUri),\n                pageSize: 'FIXED_A4'\n            });\n\n            await this.dialogsService.showAlert(result.pdfFileUri, 'PDF created');\n        } catch (e) {\n            console.error('Unable to create PDF.', e);\n            await this.dialogsService.showAlert(e.message, 'ERROR');\n        }\n        finally {\n            await loading.dismiss();\n        }\n    }\n\n    async saveAsPdfWithOcr() {\n        if (!(await this.scanbotService.checkLicense())) { return; }\n        if (!this.checkImages()) { return; }\n\n        const loading = await this.dialogsService.createLoading('Performing OCR and creating PDF ...');\n        try {\n            await loading.present();\n            const result = await this.scanbotService.SDK.performOcr({\n                images: this.pages.map(p => p.documentImageFileUri),\n                languages: ['en'],\n                outputFormat: 'FULL_OCR_RESULT',\n            });\n\n            await this.dialogsService.showAlert(result.pdfFileUri, 'PDF with OCR created');\n        } catch (e) {\n            console.error('Unable to perform OCR.', e);\n            await this.dialogsService.showAlert(e.message, 'ERROR');\n        }\n        finally {\n            await loading.dismiss();\n        }\n    }\n\n    async saveAsBinarizedTiff() {\n        if (!(await this.scanbotService.checkLicense())) { return; }\n        if (!this.checkImages()) { return; }\n\n        const loading = await this.dialogsService.createLoading('Creating TIFF ...');\n        try {\n            await loading.present();\n            const result = await this.scanbotService.SDK.writeTiff({\n                images: this.pages.map(p => p.documentImageFileUri),\n                oneBitEncoded: true, // creates 1-bit binarized black and white TIFF\n                dpi: 300, // default value is 200\n                // compression: 'LZW' // recommended default value is 'CCITT_T6' (aka. \"CCITT Fax 4\")\n            });\n\n            await this.dialogsService.showAlert(result.tiffFileUri, 'TIFF file created');\n        } catch (e) {\n            console.error('Unable to create TIFF.', e);\n            await this.dialogsService.showAlert(e.message, 'ERROR');\n        }\n        finally {\n            await loading.dismiss();\n        }\n    }\n\n    async showSaveSelection() {\n        const actionSheet = await this.actionSheetController.create({\n            header: 'Save Images as',\n            buttons: [\n                {\n                    text: 'PDF',\n                    icon: 'document',\n                    handler: () => { this.saveAsPdf(); }\n                },\n                {\n                    text: 'PDF with OCR',\n                    icon: 'document',\n                    handler: () => { this.saveAsPdfWithOcr(); }\n                },\n                {\n                    text: 'TIFF (1-bit b&w)',\n                    icon: 'document',\n                    handler: () => { this.saveAsBinarizedTiff(); }\n                },\n                {\n                    text: 'Cancel',\n                    icon: 'close',\n                    role: 'cancel',\n                    handler: () => { }\n                }\n            ]\n        });\n        await actionSheet.present();\n    }\n\n\n    private checkImages(): boolean {\n        if (this.pages.length > 0) {\n            return true;\n        }\n        this.dialogsService.showAlert(\n            'Please scan some images via Document Scanner or import from Photo Library.',\n            'Images Required');\n        return false;\n    }\n\n    async addScan() {\n        if (!(await this.scanbotService.checkLicense())) { return; }\n\n        const configs = this.scanbotService.globalDocScannerConfigs();\n        // for demo purposes we want to add only one page here.\n        configs.multiPageEnabled = false;\n        configs.multiPageButtonHidden = true;\n\n        const result = await this.scanbotService.SDK.UI.startDocumentScanner({uiConfigs: configs});\n\n        if (result.status === 'CANCELED') { return; }\n\n        await this.imageResultsRepository.addPages(result.pages);\n        this.reloadPages();\n    }\n\n    async removeAll() {\n        await this.scanbotService.SDK.cleanup();\n        await this.imageResultsRepository.removeAllPages();\n        this.reloadPages();\n    }\n}\n"],"sourceRoot":""}